package Merge_sort;

import java.util.Arrays;

public class merge_sort_InPlaceAlgo {
    // s = 0
    // e = arr.length
    
    static int [] mergeSortIP(int [] arr,int s,int e){
        if (e - s == 1){
            return arr;
        }
        int mid = s + (e - s)/2;
        mergeSortIP(arr,0,mid);
        mergeSortIP(arr,mid,e);
        mergeInPlace(arr,s,mid,e);
        return arr;
    }
    public static void main(String[] args) {
    int [] arr = {5,4,3,2,1};
        System.out.println(Arrays.toString(mergeSortIP(arr, 0, arr.length)));
    }
    private static void mergeInPlace(int [] arr, int s, int mid, int e) {
        int [] mix = new int[e - s];
        int i = s;              //indexOfFirst
        int j = mid;            //indexOfSecond
        int k = 0;              //indexOfMix
        while (i < mid && j < e){
            if (arr[i]<arr[j]){
                mix[k] = arr[i];
                i++;
            }
            else {
                mix[k] = arr[j];
                j++;
            }
            k++;
        }
        while (i < mid){
            mix[k] = arr[i];
            i++;
            k++;
        }
        while (j < e){
            mix[k] = arr[j];
            j++;
            k++;
        }
        for (int l = 0; l < mix.length; l++) {
            arr[s+l] = mix[l];
        }
    }
}
